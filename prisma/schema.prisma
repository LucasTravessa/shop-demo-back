// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String     @unique
  image       String?    @default("https://ui.shadcn.com/avatars/shadcn.jpg")
  dateOfBirth DateTime?
  type        UserType   @default(READER)
  status      UserStatus @default(UNVERIFIED)
  bio         String?

  created DateTime @default(now())
  updated DateTime @updatedAt

  administrator Administrator?
  orders        Order[]
  cart          Cart[]
}

model Administrator {
  userId Int @id @unique
  roleId Int

  created DateTime @default(now()) @db.Timestamp(6)
  updated DateTime @updatedAt @db.Timestamp(6)

  role Role @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Role {
  id       Int        @id @default(autoincrement())
  name     ROLES_ENUM @unique
  priority Int

  created DateTime @default(now()) @db.Timestamp(6)
  updated DateTime @updatedAt @db.Timestamp(6)

  administrator Administrator[]
}

model Password {
  id     String @id @default(uuid()) @db.Uuid
  hash   String @db.VarChar(512)
  salt   String @db.VarChar(512)
  userId Int    @unique

  created DateTime @default(now()) @db.Timestamp(6)
  updated DateTime @updatedAt @db.Timestamp(6)
}

model RefreshToken {
  id     String @id @default(uuid()) @db.Uuid
  hash   String @db.VarChar(512)
  salt   String @db.VarChar(512)
  userId Int    @unique

  created DateTime @default(now()) @db.Timestamp(6)
  updated DateTime @updatedAt @db.Timestamp(6)
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  status     OrderStatus @default(DRAFT)
  totalPrice Float       @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cart       Cart[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User?    @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?  @db.Text
  picture     String?
  price       Float
  isDeleted   Boolean  @default(false)
  quantity    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cart        Cart[]

  @@unique([id, isDeleted])
}

enum OrderStatus {
  DRAFT
  PURCHASED
  PAID
  SENT
  SHIPPED
  DELETED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  DISABLED
  UNVERIFIED
}

enum ROLES_ENUM {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  SUPPORT
}

enum UserType {
  READER
  AUTHOR
}
